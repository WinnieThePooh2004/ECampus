@using ECampus.Domain.Requests.Teacher
@using ECampus.Domain.Requests.Auditory
@using ECampus.Domain.Requests.Group
@using ECampus.Domain.Requests.Subject
@using ECampus.Domain.Responses.Auditory
@using ECampus.Domain.Responses.Group
@using ECampus.Domain.Responses.Subject
@using ECampus.Domain.Responses.Teacher
@inherits ModelEditForm<ClassDto>
<div class="row">
    <div class="col-md-4">
        <EditForm EditContext="EditContext" on OnValidSubmit="Submit">
            <button type="submit" class="btn btn-success">Save</button>
            <FluentValidationValidator Validator="Validator"/>
            @if (TimetableMode == TimetableMode.Auditory)
            {
                <ValidationMessage For="() => Model.AuditoryId"/>
                <br/>
            }
            @if (TimetableMode == TimetableMode.Group)
            {
                <ValidationMessage For="() => Model.GroupId"/>
                <br/>
            }
            @if (TimetableMode == TimetableMode.Teacher)
            {
                <ValidationMessage For="() => Model.TeacherId"/>
                <br/>
            }
            <div class="form-group">
                <label class="form-label">Class type</label>
                <br/>
                <InputSelect class="form-select" @bind-Value="Model.ClassType">
                    @foreach (var type in Enum.GetValues<ClassType>())
                    {
                        <option value="@type">@type</option>
                    }
                    <ValidationMessage For="@(() => Model.ClassType)"/>
                </InputSelect>
                <br/>
                <label class="form-label">Week dependency</label>
                <br/>
                <InputSelect class="form-select" @bind-Value="Model.WeekDependency">
                    @foreach (var weekDependency in Enum.GetValues<WeekDependency>())
                    {
                        <option value="@weekDependency">@weekDependency</option>
                    }
                    <ValidationMessage For="@(() => Model.WeekDependency)"/>
                </InputSelect>
                <br/>
                <br/>
            </div>
            @if (TimetableMode != TimetableMode.Teacher)
            {
                <ValidationMessage For="@(() => Model.TeacherId)"/>
                <SingleItemSelect TData="MultipleTeacherResponse" TParameters="TeacherParameters" @bind-SelectedId="Model.TeacherId" Title="Select teacher"/>
                <br/>
            }
            @if (TimetableMode != TimetableMode.Auditory)
            {
                <ValidationMessage For="@(() => Model.AuditoryId)"/>
                <SingleItemSelect TData="MultipleAuditoryResponse" TParameters="AuditoryParameters" @bind-SelectedId="Model.AuditoryId" Title="Select auditory"/>
                <br/>
            }
            @if (TimetableMode != TimetableMode.Group)
            {
                <ValidationMessage For="@(() => Model.GroupId)"/>
                <SingleItemSelect TData="MultipleGroupResponse" TParameters="GroupParameters" @bind-SelectedId="Model.GroupId" Title="Select group"/>
                <br/>
            }

            <ValidationMessage For="@(() => Model.SubjectId)"/>
            <SingleItemSelect TData="MultipleSubjectResponse" TParameters="SubjectParameters" @bind-SelectedId="Model.SubjectId" Title="Select subject"/>

        </EditForm>
    </div>
</div>