<ValidationMessage For="@(() => Model.Role)"/>
<InputSelect TValue="UserRole" Value="Model.Role" ValueExpression="@(() => Model.Role)" ValueChanged="RoleChanged">
    @foreach (var role in Enum.GetValues<UserRole>())
    {
        <option value="@role">@role</option>
    }
</InputSelect>
@if (Model.Role is UserRole.Admin or UserRole.Guest)
{
    <br/>
    <button class="btn btn-success" type="submit">Save</button>
    return;
}
@if (Model.Role == UserRole.Teacher)
{
    <ValidationMessage For="@(() => Model.TeacherId)"/>
    <SingleItemSelect TData="TeacherDto" TParameters="TeacherParameters" Title="Select teacher"
                      ParameterOptions="@(parameters => parameters.UserIdCanBeNull = false)"
                      SelectedId="Model.TeacherId"
                      SelectedIdChanged="@(id => Model.TeacherId = id)"/>
    <button class="btn btn-success" type="submit">Save</button>
    return;
}
@if (Model.Role == UserRole.Student)
{
    <ValidationMessage For="@(() => Model.StudentId)"/>
    <SingleItemSelect TData="StudentDto" TParameters="StudentParameters" Title="Select student"
                      ParameterOptions="@(parameters => parameters.UserIdCanBeNull = false)"
                      SelectedId="Model.StudentId" SelectedIdChanged="@(id => Model.StudentId = id)"/>
    <button class="btn btn-success" type="submit">Save</button>
    return;
}